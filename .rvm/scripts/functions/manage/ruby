#!/usr/bin/env bash

transform_configure_flags()
{
  typeset flag _opt_path
  typeset -a new_flags

  new_flags=()
  for flag in "${rvm_configure_flags[@]}"
  do
    case "${flag}" in
      --with-opt-dir=*)
        new_flags+=( "${flag}" )
        ;;
      --with-*-dir=*)
        _opt_path="${flag#*=}"
        flag="${flag%-dir=*}"
        new_flags+=( "${flag}" )

        #TODO: multiple --with-opt-dir= are not supported by MRI ...
        if
          [[ " ${new_flags[*]}" =~ " --with-opt-dir=" ]]
        then
          # skip if the same two times, warn if two different available.
          [[ " ${new_flags[*]} " =~ " --with-opt-dir=${_opt_path} " ]] ||
            rvm_warn "You are using conflicting '--with-opt-dir=' configure flags."
        else
          new_flags+=( "--with-opt-dir=${_opt_path}" )
        fi
        ;;
      *)
        new_flags+=( "${flag}" )
        ;;
    esac
  done

  rvm_configure_flags=( "${new_flags[@]}" )
}

# 1.9.3-p125+
__clang_ready()
{
  typeset _patch_level
  case ${rvm_ruby_string} in
    ruby-1.9.3-head*|ruby-2*)
      return 0
      ;;
    ruby-1.9.3*)
      _patch_level="${rvm_ruby_patch_level:-p0}"
      _patch_level="${_patch_level#p}"
      (( _patch_level >= 125 )) && return 0 || true
      ;;
  esac
  return 1
}

ruby_install()
{
  typeset result temp_flags

  __rvm_check_for_bison # && Run like hell...
  if __rvm_check_for_bison
  then true
  else
    result=$?
    rvm_log "Bison required but not found. Halting."
    return $result
  fi

  case ${rvm_ruby_string:-""} in
    ruby-1.8.*-head)
      if __rvm_ensure_has_mri_ruby "1.8.|ree"
      then true
      else return $?
      fi
      ;;
    ruby-head|ruby-1.9.*-head)
      if
        __rvm_ensure_has_mri_ruby
      then
        typeset compatible_baseruby
        compatible_baseruby="$rvm_wrappers_path/$(__rvm_mri_ruby)/ruby"
        if [[ -x "$compatible_baseruby" ]]
        then
          rvm_configure_flags+=( --with-baseruby="$compatible_baseruby" )
        fi
      else
        return $?
      fi
      ;;
  esac

  # TODO: needed <= 1.9.3-p194, confirm with http://bugs.ruby-lang.org/issues/6903
  if
    [[ " ${rvm_configure_flags[*]}" =~ " --enable-load-relative" ]]
  then
    rvm_patch_names+=( ruby-multilib )
  fi

  case ${rvm_ruby_string} in
    ruby-1.9*)
      # Ruby 1.9 should now use libyaml which is for Psych.
      if
        [[ " ${rvm_configure_flags[*]}" =~ " --enable-load-relative" ]]
      then
        # when relative is in effect libyaml is installed in ruby itself so it will be moved with ruby
        prefix_path="${rvm_rubies_path}/${rvm_ruby_string}" libyaml

        __rvm_update_configure_env CFLAGS="-I${rvm_rubies_path}/${rvm_ruby_string}/include"
        __rvm_update_configure_env LDFLAGS="-L${rvm_rubies_path}/${rvm_ruby_string}/lib"
        if [[ -d "${rvm_rubies_path}/${rvm_ruby_string}/lib64" ]]
        then __rvm_update_configure_env LDFLAGS="-L${rvm_rubies_path}/${rvm_ruby_string}/lib64"
        fi
      else
        libyaml_installed || libyaml # Installs libyaml

        __rvm_update_configure_env CFLAGS="-I${rvm_path}/usr/include"
        __rvm_update_configure_env LDFLAGS="-L${rvm_path}/usr/lib"
        if [[ -d "${rvm_path}/usr/lib64" ]]
        then __rvm_update_configure_env LDFLAGS="-L${rvm_path}/usr/lib64"
        fi
      fi

      # Ruby 1.9 does not allow --with-<lib>-dir,
      # so we transform it to --with-<lib> --with-opt-dir=...
      # see https://github.com/wayneeseguin/rvm/issues/674
      transform_configure_flags
      ;;
  esac

  # Temporary solution for this bug http://bugs.ruby-lang.org/issues/5384
  case "$(uname -s)" in
    SunOS)
      case ${rvm_ruby_string} in
        ruby-1.9*)
          rvm_configure_flags+=( ac_cv_func_dl_iterate_phdr=no )
          ;;
      esac
    ;;
  esac

  __rvm_setup_compile_environment

  # Force using clang when only LLVM available and user did not selected compiler,
  # hides the need for `rvm_force_autoconf=1`
  # which should be default, but is not by default available on Xcode 4.3.
  if [[ "$MACHTYPE" == *darwin* ]] &&
    __clang_ready && __rvm_compiler_is_llvm &&
    ! __rvm_selected_compiler > /dev/null
  then
    rvm_configure_flags+=( --with-gcc=clang )
  fi

  if __rvm_compiler_is_llvm
  then
    if __clang_ready || __rvm_selected_compiler > /dev/null
    then
      rvm_warn "Building '${rvm_ruby_string}' using clang - but it's not (fully) supported, expect errors."
    else
      rvm_error "The provided compiler '$(__rvm_found_compiler)' is LLVM based, it is not yet fully supported by ruby and gems, please read \`rvm requirements\`."
      return 1
    fi
  fi

  ( __rvm_install_source $* )
  result=$?

  if
    [[ "$MACHTYPE" == *darwin* && " ${rvm_configure_flags[*]}" =~ " --enable-load-relative" ]]
  then
    typeset libyaml_lib_path_old libyaml_lib_path_new psych_lib_path target_path target_path_escaped
    target_path="${rvm_rubies_path%/}/${rvm_ruby_string}"
    target_path_escaped="${target_path//\//\/}"
    libyaml_lib_path_old="$( find "$target_path" -name libyaml-*.dylib )"
    libyaml_lib_path_new="${libyaml_lib_path_old/${target_path_escaped}/@executable_path/..}"
    psych_lib_path="$( find "${target_path}" -name psych.bundle )"
    __rvm_log_command fix.osx.dependencies "fix osx dependencies" install_name_tool -change "${libyaml_lib_path_old}" "${libyaml_lib_path_new}" "${psych_lib_path}"
  fi

  if __rvm_compiler_is_llvm
  then
    rvm_warn "Ruby '${rvm_ruby_string}' was built using clang - but it's not (fully) supported, expect errors."
  fi

  typeset patches_count
  patches_count=$(
    rvm_ruby_string="${rvm_ruby_string}" "$rvm_scripts_path/patchsets" show default | wc -l
  )
  # 1.9.3 provides a patch to compile better with LLVM
  if [[ ! "${rvm_ruby_string}" =~ "ruby-1.9.3" ]] && (( patches_count > 0 ))
  then
    rvm_warn "Please be aware that you just installed a ruby that requires ${patches_count} patches just to be compiled on up to date linux system.
This may have known and unaccounted for security vulnerabilities.
Please consider upgrading to Ruby $(__rvm_db "ruby_version")-$(__rvm_db "ruby_patchlevel") which will have all of the latest security patches."
  fi

  return ${result:-0}
}
